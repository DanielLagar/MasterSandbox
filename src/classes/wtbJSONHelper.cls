/*
 * VERSION 2 WITH SIBLING FINDER SUPPORT
 * christopher.macduff@accenture.com 12th July 2017
 */ 

// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class wtbJSONHelper {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Response {
		public Integer numFound {get;set;} 
		public Integer start {get;set;} 
		public List<Docs> docs {get;set;} 

		public Response(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'numFound') {
							numFound = parser.getIntegerValue();
						} else if (text == 'start') {
							start = parser.getIntegerValue();
						} else if (text == 'docs') {
							docs = new List<Docs>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								docs.add(new Docs(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Response consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ResponseHeader {
		public Integer status {get;set;} 
		public Integer QTime {get;set;} 
		public Params params {get;set;} 

		public ResponseHeader(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getIntegerValue();
						} else if (text == 'QTime') {
							QTime = parser.getIntegerValue();
						} else if (text == 'params') {
							params = new Params(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ResponseHeader consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Params {
		public String q {get;set;} 
		public String pt {get;set;} 
		public String d {get;set;} 
		public String indent {get;set;} 
		public String fl {get;set;} 
		public String fq {get;set;} 
		public String sort_Z {get;set;} // in json: sort
		public String rows {get;set;} 
		public String spatial {get;set;} 
		public String sfield {get;set;} 
		public String wt {get;set;} 

		public Params(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'q') {
							q = parser.getText();
						} else if (text == 'pt') {
							pt = parser.getText();
						} else if (text == 'd') {
							d = parser.getText();
						} else if (text == 'indent') {
							indent = parser.getText();
						} else if (text == 'fl') {
							fl = parser.getText();
						} else if (text == 'fq') {
							fq = parser.getText();
						} else if (text == 'sort') {
							sort_Z = parser.getText();
						} else if (text == 'rows') {
							rows = parser.getText();
						} else if (text == 'spatial') {
							spatial = parser.getText();
						} else if (text == 'sfield') {
							sfield = parser.getText();
						} else if (text == 'wt') {
							wt = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Params consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Docs {
		public String cnsmr_facng_name {get;set;} 
		public String store_address {get;set;} 
		public String gtin {get;set;} 
		public String store_publc_phone_num {get;set;} 
		public String store_latitude_longitude {get;set;} 
		public String avlblty_ind {get;set;} 
		public String retailer_name {get;set;} 
		//public Double geodist() {get;set;} 
		public Double geodist {get;set;}//Kilometres returned by bigdata
        public Decimal km{get;set;}//Kilometres rounded to 2 decimal points
        public Decimal miles{get;set;}//Kilometres converted to miles rounded to 2 decimal points
        public String gaMarker {get;set;}//String to pass to Google Maps: retailer_name + cust_store_coordinate //TODO: Still used?

		public Docs(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'cnsmr_facng_name') {
							cnsmr_facng_name = parser.getText();
						} else if (text == 'store_address') {
							store_address = parser.getText();
						} else if (text == 'gtin') {
							gtin = parser.getText();
						} else if (text == 'store_publc_phone_num') {
							store_publc_phone_num = parser.getText();
						} else if (text == 'store_latitude_longitude') {
							store_latitude_longitude = parser.getText();
						} else if (text == 'avlblty_ind') {
							avlblty_ind = parser.getText();
						} else if (text == 'retailer_name') {
							retailer_name = parser.getText();
                            gaMarker = parser.getText()+', '+store_latitude_longitude;//gaMarker set store name and lat/lng
						} else if (text == 'geodist()') {
							//geodist() = parser.getDoubleValue();
							geodist = parser.getDoubleValue();
                            //Convert to decimal and 2 points
                            km = geodist;
                            km = km.setScale(2);
                            //Convert to miles
                            miles = geodist*0.621371;
                            miles = miles.setScale(2);
						} else {
							System.debug(LoggingLevel.WARN, 'Docs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	//public class wtbJSONHelperV2 {
		public ResponseHeader responseHeader {get;set;} 
		public Response response {get;set;} 

		public wtbJSONHelper(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'responseHeader') {
							responseHeader = new ResponseHeader(parser);
						} else if (text == 'response') {
							response = new Response(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'wtbJSONHelperV2 consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	//}
	
	
	public static wtbJSONHelper parse(String json) {
		return new wtbJSONHelper(System.JSON.createParser(json));
	}
}